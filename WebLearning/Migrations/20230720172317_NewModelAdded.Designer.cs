// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieManagementMVC.Data;

#nullable disable

namespace MovieManagementMVC.Migrations
{
    [DbContext(typeof(MovieManagementMVCContext))]
    [Migration("20230720172317_NewModelAdded")]
    partial class NewModelAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieManagementMVC.Models.Halls", b =>
                {
                    b.Property<int>("HallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HallId"));

                    b.Property<string>("HallDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HallName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NowShowingId")
                        .HasColumnType("int");

                    b.HasKey("HallId");

                    b.HasIndex("NowShowingId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.Movies", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NowShowingId")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("NowShowingId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.NowShowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("NowShowing");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.Shifts", b =>
                {
                    b.Property<int>("ShitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShitId"));

                    b.Property<int?>("NowShowingId")
                        .HasColumnType("int");

                    b.Property<string>("ShitTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShitId");

                    b.HasIndex("NowShowingId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.Halls", b =>
                {
                    b.HasOne("MovieManagementMVC.Models.NowShowing", null)
                        .WithMany("Halls")
                        .HasForeignKey("NowShowingId");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.Movies", b =>
                {
                    b.HasOne("MovieManagementMVC.Models.NowShowing", null)
                        .WithMany("Movies")
                        .HasForeignKey("NowShowingId");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.Shifts", b =>
                {
                    b.HasOne("MovieManagementMVC.Models.NowShowing", null)
                        .WithMany("Shifts")
                        .HasForeignKey("NowShowingId");
                });

            modelBuilder.Entity("MovieManagementMVC.Models.NowShowing", b =>
                {
                    b.Navigation("Halls");

                    b.Navigation("Movies");

                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
